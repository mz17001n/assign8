1.What instruction is “int a, b, c, d;” converted to? 
Answer: subl $16,%esp

2.Does “int a, b, c, d;” shrink or grow the stack? How many bytes are allocated on stack for a, b, c, and d? Explain them using instruction from question 1.
Answer: “int a, b, c, d;” grows the stack. Each integer is allocated 4 bytes so all integers together are allocated 16 bytes and we can see that in the number 16 that is in the instruction: "subl $16,%esp"

3.What instruction is “b=2;” converted to? How is the address of variable b formed in the instruction?
Answer: "b=2" is converted to "movl $2,-8(%ebp)". The address of b is formed in the instructions in the part where it says "-8(%ebp)". That sets the adress of b 8 bytes before the bottom of the stack.

4.Based on the instructions converted from four assignments, can we claim the declaration order determines the allocation order? For instance, a is declared before b, does it mean a is to be allocated before b on stack? Verify your theory by changing the declaration to “int a, c, b, d;”
Answer: Declaration order does not determine the allocation order. This can be seen by changing the declaration order from "int a, b, c, d;" to "int a, c, b, d;". Once this change is done, one can see that the allocation order does not change.